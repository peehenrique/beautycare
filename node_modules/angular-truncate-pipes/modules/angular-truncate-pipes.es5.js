import { NgModule, Pipe } from '@angular/core';
var WordsPipe = (function () {
    function WordsPipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    WordsPipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = 4; }
        var /** @type {?} */ res = value;
        if (value && args > 0) {
            var /** @type {?} */ valueWords = value.split(/\s+/);
            if (valueWords.length > args) {
                res = valueWords.slice(0, args).join(' ') + '…';
            }
        }
        return res;
    };
    return WordsPipe;
}());
WordsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'words'
            },] },
];
/**
 * @nocollapse
 */
WordsPipe.ctorParameters = function () { return []; };
var SplitcharactersPipe = (function () {
    function SplitcharactersPipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    SplitcharactersPipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = 10; }
        var /** @type {?} */ res = value;
        if (value && value.length > args && args > 0) {
            var /** @type {?} */ prefix = value.substring(0, args / 2);
            var /** @type {?} */ postfix = value.substring(value.length - args / 2, value.length);
            res = prefix + "..." + postfix;
        }
        return res;
    };
    return SplitcharactersPipe;
}());
SplitcharactersPipe.decorators = [
    { type: Pipe, args: [{
                name: 'splitcharacters'
            },] },
];
/**
 * @nocollapse
 */
SplitcharactersPipe.ctorParameters = function () { return []; };
var CharactersPipe = (function () {
    function CharactersPipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @param {?=} breakOnWord
     * @return {?}
     */
    CharactersPipe.prototype.transform = function (value, args, breakOnWord) {
        if (args === void 0) { args = 10; }
        var /** @type {?} */ res = value;
        if (value && value.length > args && args > 0) {
            value = value.substring(0, args);
            if (breakOnWord) {
                while (value.charAt(value.length - 1) === ' ') {
                    value = value.substr(0, value.length - 1);
                }
            }
            else {
                var /** @type {?} */ lastspace = value.lastIndexOf(' ');
                // get last space
                if (lastspace !== -1) {
                    value = value.substr(0, lastspace);
                }
            }
            res = value + "...";
        }
        return res;
    };
    return CharactersPipe;
}());
CharactersPipe.decorators = [
    { type: Pipe, args: [{
                name: 'characters'
            },] },
];
/**
 * @nocollapse
 */
CharactersPipe.ctorParameters = function () { return []; };
var TruncatePipesModule = (function () {
    function TruncatePipesModule() {
    }
    /**
     * Use in AppModule
     * @return {?}
     */
    TruncatePipesModule.forRoot = function () {
        return {
            ngModule: TruncatePipesModule,
            providers: []
        };
    };
    /**
     * Use in features modules with lazy loading
     * @return {?}
     */
    TruncatePipesModule.forChild = function () {
        return {
            ngModule: TruncatePipesModule,
            providers: []
        };
    };
    return TruncatePipesModule;
}());
TruncatePipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CharactersPipe,
                    SplitcharactersPipe,
                    WordsPipe
                    // Pipes.
                    // Directives.
                ],
                exports: [
                    CharactersPipe,
                    SplitcharactersPipe,
                    WordsPipe
                    // Pipes.
                    // Directives.
                ]
            },] },
];
/**
 * @nocollapse
 */
TruncatePipesModule.ctorParameters = function () { return []; };
// Public classes.
/**
 * Angular library starter.
 * Build an Angular library compatible with AoT compilation & Tree shaking.
 * Written by Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular-truncate-pipes
 */
/**
 * Entry point for all public APIs of the package.
 */
/**
 * Generated bundle index. Do not edit.
 */
export { TruncatePipesModule, CharactersPipe as ɵa, SplitcharactersPipe as ɵb, WordsPipe as ɵc };
//# sourceMappingURL=angular-truncate-pipes.es5.js.map
