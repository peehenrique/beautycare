{"version":3,"file":"angular-truncate-pipes.js","sources":["../../angular-truncate-pipes.ts","../../public_api.ts","../../src/angular-truncate-pipes.ts","../../src/modules/truncate-pipes.module.ts","../../src/pipes/characters.pipe.ts","../../src/pipes/splitcharacters.pipe.ts","../../src/pipes/words.pipe.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {TruncatePipesModule} from './public_api';\n\nexport {CharactersPipe as ɵa} from './src/pipes/characters.pipe';\nexport {SplitcharactersPipe as ɵb} from './src/pipes/splitcharacters.pipe';\nexport {WordsPipe as ɵc} from './src/pipes/words.pipe';","/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-truncate-pipes\n */\n\n/**\n * Entry point for all public APIs of the package.\n */\nexport {TruncatePipesModule} from './src/angular-truncate-pipes';\n","// Public classes.\nexport { TruncatePipesModule } from './modules/truncate-pipes.module';\n","import { WordsPipe } from './../pipes/words.pipe';\nimport { SplitcharactersPipe } from './../pipes/splitcharacters.pipe';\nimport { CharactersPipe } from './../pipes/characters.pipe';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nexport class TruncatePipesModule {\n/**\n * Use in AppModule\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TruncatePipesModule,\n            providers: []\n        };\n    }\n/**\n * Use in features modules with lazy loading\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: TruncatePipesModule,\n            providers: []\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        CharactersPipe,\n        SplitcharactersPipe,\n        WordsPipe\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        CharactersPipe,\n        SplitcharactersPipe,\n        WordsPipe\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TruncatePipesModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTruncatePipesModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTruncatePipesModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class CharactersPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} args\n * @param {?=} breakOnWord\n * @return {?}\n */\ntransform(value: string, args: number = 10, breakOnWord?: boolean): string {\n    let /** @type {?} */ res = value;\n    if (value && value.length > args && args > 0) {\n      value = value.substring(0, args);\n\n      if (breakOnWord) {\n        while (value.charAt(value.length - 1) === ' ') {\n          value = value.substr(0, value.length - 1);\n        }\n      } else {\n        const /** @type {?} */ lastspace = value.lastIndexOf(' ');\n        // get last space\n        if (lastspace !== -1) {\n          value = value.substr(0, lastspace);\n        }\n      }\n      res = `${value}...`;\n    }\n    return res;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'characters'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CharactersPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCharactersPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCharactersPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class SplitcharactersPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} args\n * @return {?}\n */\ntransform(value: string, args: number = 10): string {\n    let /** @type {?} */ res = value;\n    if (value && value.length > args && args > 0) {\n      const /** @type {?} */ prefix = value.substring(0, args / 2);\n      const /** @type {?} */ postfix = value.substring(value.length - args / 2, value.length);\n      res = `${prefix}...${postfix}`;\n    }\n    return res;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'splitcharacters'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitcharactersPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitcharactersPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitcharactersPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class WordsPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} args\n * @return {?}\n */\ntransform(value: string, args: number = 4): string {\n    let /** @type {?} */ res = value;\n    if (value && args > 0) {\n      const /** @type {?} */ valueWords = value.split(/\\s+/);\n      if (valueWords.length > args) {\n        res = valueWords.slice(0, args).join(' ') + '…';\n      }\n    }\n    return res;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'words'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WordsPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nWordsPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWordsPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;AMCA,MAAA,SAAA,CAAA;;;;;;IAMA,SAHG,CAAA,KAAA,EAAA,IAGH,GAHG,CAAA,EAGH;QACI,qBAHI,GAAA,GAAM,KAAA,CAAM;QAIhB,IAAI,KAHC,IAAQ,IAAA,GAAO,CAAA,EAAG;YAIrB,uBAHM,UAAA,GAAa,KAAA,CAAM,KAAC,CAAK,KAAC,CAAK,CAAC;YAItC,IAAI,UAHC,CAAU,MAAC,GAAQ,IAAA,EAAM;gBAI5B,GAAG,GAHG,UAAA,CAAW,KAAC,CAAK,CAAC,EAAE,IAAA,CAAK,CAAC,IAAC,CAAI,GAAC,CAAG,GAAG,GAAA,CAAI;aAIjD;SACF;QACD,OAHO,GAAA,CAAI;KAIZ;;AAFI,SAAP,CAAA,UAAO,GAAoC;IAI3C,EAHE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA;gBAIlB,IAAI,EAHE,OAAA;aAIP,EAHC,EAAG;CAIJ,CAHC;;;;AAED,SAAD,CAAA,cAAC,GAAA,MAAA,EAMA,CAAC;;ADzBF,MAAA,mBAAA,CAAA;;;;;;IAMA,SAHG,CAAA,KAAA,EAAA,IAGH,GAHG,EAAA,EAGH;QACI,qBAHI,GAAA,GAAM,KAAA,CAAM;QAIhB,IAAI,KAHC,IAAQ,KAAA,CAAM,MAAC,GAAQ,IAAA,IAAQ,IAAA,GAAO,CAAA,EAAG;YAI5C,uBAHM,MAAA,GAAS,KAAA,CAAM,SAAC,CAAS,CAAC,EAAE,IAAA,GAAO,CAAA,CAAE,CAAC;YAI5C,uBAHM,OAAA,GAAU,KAAA,CAAM,SAAC,CAAS,KAAC,CAAK,MAAC,GAAQ,IAAA,GAAO,CAAA,EAAG,KAAA,CAAM,MAAC,CAAM,CAAC;YAIvE,GAAG,GAHG,CAGZ,EAHY,MAAI,CAGhB,GAAA,EAHsB,OAAM,CAG5B,CAHmC,CAAE;SAIhC;QACD,OAHO,GAAA,CAAI;KAIZ;;AAFI,mBAAP,CAAA,UAAO,GAAoC;IAI3C,EAHE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA;gBAIlB,IAAI,EAHE,iBAAA;aAIP,EAHC,EAAG;CAIJ,CAHC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,MAAA,EAMA,CAAC;;ADxBF,MAAA,cAAA,CAAA;;;;;;;IAOA,SAJG,CAAA,KAAA,EAAA,IAIH,GAJG,EAAA,EAAA,WAAA,EAIH;QACI,qBAJI,GAAA,GAAM,KAAA,CAAM;QAKhB,IAAI,KAJC,IAAQ,KAAA,CAAM,MAAC,GAAQ,IAAA,IAAQ,IAAA,GAAO,CAAA,EAAG;YAK5C,KAAK,GAJG,KAAA,CAAM,SAAC,CAAS,CAAC,EAAE,IAAA,CAAK,CAAC;YAMjC,IAAI,WAJC,EAAY;gBAKf,OAAO,KAJC,CAAK,MAAC,CAAM,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,KAAK,GAAA,EAAK;oBAK7C,KAAK,GAJG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,KAAA,CAAM,MAAC,GAAQ,CAAA,CAAE,CAAC;iBAK3C;aACF;iBAJM;gBAKL,uBAJM,SAAA,GAAY,KAAA,CAAM,WAAC,CAAW,GAAC,CAAG,CAAC;;gBAMzC,IAAI,SAJC,KAAa,CAAA,CAAE,EAAE;oBAKpB,KAAK,GAJG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,SAAA,CAAU,CAAC;iBAKpC;aACF;YACD,GAAG,GAJG,CAIZ,EAJY,KAAI,CAIhB,GAAA,CAJqB,CAAK;SAKrB;QACD,OAJO,GAAA,CAAI;KAKZ;;AAHI,cAAP,CAAA,UAAO,GAAoC;IAK3C,EAJE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA;gBAKlB,IAAI,EAJE,YAAA;aAKP,EAJC,EAAG;CAKJ,CAJC;;;;AAED,cAAD,CAAA,cAAC,GAAA,MAAA,EAOA,CAAC;;ADjCF,MAAA,mBAAA,CAAA;;;;;IAOK,OAAA,OAAA,GAAL;QADQ,OAEO;YADH,QAAQ,EAEE,mBAAA;YADV,SAAS,EAEE,EAAA;SADd,CAEC;KADL;;;;;IAOA,OAAA,QAAA,GAAL;QADQ,OAEO;YADH,QAAQ,EAEE,mBAAA;YADV,SAAS,EAEE,EAAA;SADd,CAEC;KADL;;AAIE,mBAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,YAAY,EAEE;oBADV,cAAc;oBACd,mBAAmB;oBACnB,SAAS;;;iBAGZ;gBACD,OAAO,EAEE;oBADL,cAAc;oBACd,mBAAmB;oBACnB,SAAS;;;iBAGZ;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC;;ADhDF,kBAAC;;ADAD;;;;;;;;;GAUG;;ADVH;;GAEG;;;;"}